{"tagline":"fluent testing for python","google":"UA-1277640-11","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Sure","body":"# Install\r\n\r\n    user@machine:~$ [sudo] pip install sure\r\n\r\n# Documentation\r\n\r\n## testing behaviour of objects\r\n\r\n```python\r\nfrom sure import that\r\n\r\nassert that(\"something\").is_a(str)\r\nassert that(\"something\").like(\"some\")\r\nassert \"thing\" in that(\"something\")\r\n\r\nclass FooBar:\r\n    attribute_one = \"simple\"\r\n\r\nassert \"attribute_one\" in that(FooBar)\r\nvassert that(FooBar).has(\"attribute_one\")\r\nassert that(FooBar).equals(FooBar)\r\n\r\n# go faster\r\n\r\nassert that(FooBar).at('attribute_one').equals('simple')\r\n\r\n# and also for dictionaries\r\n\r\nname = dict(john='doe')\r\nassert that(name).has('john')\r\n\r\n# go faster\r\nassert that(name).at('john').equals('doe')\r\n```\r\n\r\n## strings\r\n\r\n```python\r\nfrom sure import that\r\n\r\nassert that(\"   string \\n with    lots of \\n spaces and breaklines\\n\\n \")\r\n    .looks_like(\"string with lots of spaces and breaklines\")\r\n\r\nassert that('foobar').contains('foo')\r\nassert that('foobar').doesnt_contain(\"123\")\r\nassert that('foobar').does_not_contain(\"123\")\r\n```\r\n\r\n## iterable objects\r\n\r\n\r\n### testing length\r\n\r\n```python\r\nfrom sure import that\r\n\r\nanimals = ['dog', 'cat', 'chicken']\r\nobjects = ['television', 'refrigerator']\r\nmovies = ['conan', 'matrix', 'fight club', 'rocky', 'rambo']\r\n\r\nassert that([]).is_empty\r\nassert that([]).are_empty\r\n\r\nassert that(animals).len_is(3)\r\nassert that(animals).len_is(['list with', 'three', 'elements'])\r\n\r\nassert that(movies).len_greater_than(3)\r\nassert that(movies).len_greater_than(animals)\r\nassert that(movies).len_greater_than(objects)\r\n\r\nassert that(movies).len_greater_than(3)\r\nassert that(movies).len_greater_than(animals)\r\nassert that(movies).len_greater_than(objects)\r\n\r\nassert that(movies).len_greater_than_or_equals(3)\r\nassert that(movies).len_greater_than_or_equals(animals)\r\nassert that(movies).len_greater_than_or_equals(objects)\r\n\r\nassert that(objects).len_lower_than(3)\r\nassert that(objects).len_lower_than(animals)\r\nassert that(objects).len_lower_than(objects)\r\n\r\nassert that(objects).len_lower_than_or_equals(3)\r\nassert that(objects).len_lower_than_or_equals(animals)\r\nassert that(objects).len_lower_than_or_equals(objects)\r\n```\r\n\r\n### testing elements\r\n\r\n```python\r\nfrom sure import that\r\n\r\nclass Animal:\r\n  def __init__(self, name):\r\n    self.kind = 'mammal'\r\n    self.name = name\r\n\r\nmammals = [\r\n  Animal('dog'),\r\n  Animal('cat'),\r\n  Animal('cat'),\r\n  Animal('cow'),\r\n}\r\n\r\nassert that(mammals).the_attribute('kind').equals('mammal')\r\nassert that(mammals, within_range(1, 2)).the_attribute('name').equals('cat')\r\n```\r\n\r\n### deep comparisons\r\n\r\nSure will iterate through your dictionaries, tuples and lists and compare all\r\nits contents, side-by-side, in depth. All you gotta do is use `deep_equals`.\r\n\r\nExample:\r\n\r\n\r\n```python\r\nsomething = {\r\n    'one': 'yeah',\r\n    'another': {\r\n        'two': 'cool',\r\n    },\r\n}\r\n\r\nassert that(something).deep_equals({\r\n    'one': 'yeah',\r\n    'another': {\r\n        'two': 'cool',\r\n    },\r\n})\r\n```\r\n\r\nAnd even better, when the comparison doesn't at some point, sure will show a **VERY** meaningful assertion message for you.\r\n\r\n#### further\r\n\r\n```python\r\nclass animal(object):\r\n    def __init__(self, kind):\r\n        self.attributes = {\r\n            'class': 'mammal',\r\n            'kind': kind,\r\n        }\r\n\r\nanimals = [\r\n    animal('dog'),\r\n    animal('cat'),\r\n    animal('cow'),\r\n    animal('cow'),\r\n    animal('cow'),\r\n]\r\n\r\nassert that(animals).in_each(\"attributes['class']\").matches('mammal')\r\nassert that(animals).in_each(\"attributes['class']\").matches(['mammal','mammal','mammal','mammal','mammal'])\r\n\r\nassert that(animals).in_each(\"attributes['kind']\").matches(['dog','cat','cow','cow','cow'])\r\n```\r\n\r\n## contextual setup and teardown\r\n\r\n```python\r\nimport sure\r\n\r\ndef setup_file(context):\r\n    context.file = open(\"foobar.xml\")\r\n\r\ndef teardown_file(context):\r\n    context.file.close()\r\n\r\n@sure.that_with_context(setup_file, teardown_file):\r\ndef file_is_a_xml(context):\r\n    \"this file is a xml\"\r\n    sure.that(context.file.read()).contains(\"<root>\")\r\n```\r\n\r\n### you can also use lists containing callbacks for setup/teardown\r\n\r\nLike this:\r\n\r\n```python\r\ndef setup_file(context):\r\n    context.file = open(\"foobar.xml\")\r\n\r\ndef a_browser(context):\r\n    from httplib2 import Http\r\n    context.browser = Http()\r\n\r\ndef then_clean_file(context):\r\n    context.file.close()\r\n\r\ndef and_browser(context):\r\n    del context.browser\r\n\r\n@sure.that_with_context([setup_file, a_browser], [then_clean_file, and_browser]):\r\ndef file_equals_response(context):\r\n    \"the file equals the response\"\r\n    headers, response_body = context.http.request('http://github.com', 'GET')\r\n\r\n    file_contents = context.file.read()\r\n    sure.that(response_body).contains(file_contents)\r\n```\r\n\r\n<a name=\"timed\"></a>\r\n## timed tests\r\n\r\n```python\r\nfrom sure import *\r\n\r\n@within(five=seconds):\r\ndef test_sleep_for_4_seconds():\r\n    import time\r\n    time.sleep(4)\r\n\r\n@within(ten=miliseconds):\r\ndef test_sleep_for_4_miliseconds():\r\n    import time\r\n    time.sleep(0.004)\r\n\r\n@within(ten=microseconds):\r\ndef test_sleep_for_12_microseconds():\r\n    import time\r\n    time.sleep(0.00012)\r\n\r\n@within(one=minute):\r\ndef test_sleep_for_59_seconds():\r\n    import time\r\n    time.sleep(59)\r\n\r\n@within(two=minutes):\r\ndef test_sleep_for_1_minute_and_59_seconds():\r\n    import time\r\n    time.sleep(119)\r\n```\r\n\r\nif any of the tests above take more than expected, a assertion_error is raised\r\n\r\n## exceptions\r\n\r\n```python\r\ndef function(arg1=None, arg2=None):\r\n    if arg1 and arg2:\r\n        raise RuntimeError('yeah, it failed')\r\n\r\nassert that(function, with_args=[1], and_kwargs={'arg2': 2}).raises(RuntimeError)\r\nassert that(function, with_args=[1], and_kwargs={'arg2': 2}).raises(RuntimeError, 'yeah, it failed')\r\nassert that(function, with_args=[1], and_kwargs={'arg2': 2}).raises('yeah, it failed')\r\n\r\nassert that(function, with_kwargs={'arg1': 1, 'arg2': 2}).raises(RuntimeError)\r\nassert that(function, with_kwargs={'arg1': 1, 'arg2': 2}).raises(RuntimeError, 'yeah, it failed')\r\nassert that(function, with_kwargs={'arg1': 1, 'arg2': 2}).raises('yeah, it failed')\r\n\r\n# you can also match pieces of the string\r\nassert that(function, with_kwargs={'arg1': 1, 'arg2': 2}).raises('it failed')\r\nassert that(function, with_kwargs={'arg1': 1, 'arg2': 2}).raises(RuntimeError, 'it failed')\r\n```\r\n\r\n### testing if some callback should never raise an exception\r\n\r\n```python\r\ndef good_boy():\r\n    pass\r\n\r\nassert that(good_boy).does_not_raise(Exception)\r\nassert that(good_boy).doesnt_raise(Exception)\r\n```\r\n\r\n## add your own matchers\r\n\r\n```python\r\n@that.is_a_matcher\r\ndef could_work(matcher, parameter):\r\n    assert matcher._src == \"this\"\r\n    assert parameter == \"I mean, for real!\"\r\n    return \"cool!\"\r\n\r\nassert that(\"this\").could_work(\"I mean, for real!\") == \"cool!\"\r\n```\r\n\r\n<a name=\"BDD\" />\r\n# Hipster BDD with just... python code\r\n\r\nUnlikely [lettuce](http://lettuce.it), sure allows you to describe the\r\nbehavior you expect your application to have, very focused on\r\nproviding a very declarative and self-describing DSL through simple\r\ntricks around the python syntax.\r\n\r\nThis may disagree with conventions like [PEP-8](http://www.python.org/dev/peps/pep-0008/) and Tim Peters's\r\n[Zen of Python](http://www.python.org/dev/peps/pep-0020/).\r\n\r\nIt's not that \"sure\" disagrees with those conventions, the module\r\nitself follows both PEP-8 and PEP-20. But it turns out that \"sure\"\r\nprovides you with sometimes conflicting conventions, for the sake of\r\nreadability and maintainability of the code that makes sure your\r\nproduction code is always healthy.\r\n\r\nSure aliases the decorator `@that_with_context` as `@scenario` and the\r\ncontext passed as parameter is just a bag of variables you can mess\r\naround without feeling like juggling with machetes. So that your\r\nscenario can share data in a really flexible way.\r\n\r\n*Don't worry, \"sure\"'s internals seal the variables you use within the\r\n test scope and its setup/teardown functions. Everything is sandboxed.\r\n\r\n## The idea\r\n\r\nFirstly, if you are not familiar with [Behavior-driven development](http://antonymarcano.com/blog/2011/03/goals-tasks-action/) I strongly recommend the blog post [\"What's in a story\"](http://dannorth.net/whats-in-a-story/), by [Dan North](http://dannorth.net), former [ThoughtWorks](http://en.wikipedia.org/wiki/ThoughtWorks) employee. And as you might know, ThoughtWorks [is internationally recognized](http://en.wikipedia.org/wiki/ThoughtWorks#History) as being the cradle of agile methodologies, which often includes using assorted automated test engineering techniques.\r\n\r\nSure is pretty much just a layer you should use on top of\r\n[nose-compatible test functions](http://readthedocs.org/docs/nose/en/latest/writing_tests.html#test-functions). It\r\nprovides you with decorators that leverage declaring scenarios and\r\nactions to be executed within them.\r\n\r\nThe DSL itself is just python code, altough it requires a certain\r\neffort from the developers that authors the tests. In the other hand,\r\nit also provides builtin validation of action executions, looking for\r\nconflicting inter-dependency, as well as giving very meaningful\r\nfeedback, so that you won't spend hours debugging messed up code.\r\n\r\n## Nomenclature\r\n\r\nThere are a few small examples of usage through the sub-sections\r\nbelow, don't rely solely on them, to go further on the API usage,\r\ncheck the documentation.\r\n\r\n### Scenario\r\n\r\nScenarios are actually just\r\n[nose-compatible test functions](http://readthedocs.org/docs/nose/en/latest/writing_tests.html#test-functions)\r\ndecorated with `@scenario()`.\r\n\r\nScenarios accepts lists of callbacks that will be called before and after\r\nthemselves so that you have a fine grained setup/teardown management.\r\nAlso, scenarios will call the original test functions with one\r\nargument: context\r\n\r\n### Context\r\n\r\nContext is a clever object that keeps records of its contents and\r\nreporting ant problems when trying to access them, so that you know\r\nwhat part of your test is wrong.\r\n\r\nContexts are also a key thing when calling actions, you can create\r\naliases of it named: `Given, When, Then, And` and so on... You can see\r\nmore in the examples or docs.\r\n\r\n### Actions\r\n\r\nAre the smalllest portions of test that will compose your actions,\r\ndeclare them within any setup functions, the `@action_for` decorator\r\nalso gives you ways to explicit what variables the action will create\r\nwithin the `context` argument, or require previous variables to be\r\nalready in the `context`.\r\n\r\nThis is one of the most important features of \"sure\", so that you and\r\nyour team will spend less time debugging a test and more on getting\r\nthings done.\r\n\r\n### Setup/Teardown\r\n\r\nAs said above, the `@scenario()` decorators takes 2 positional\r\narguments: setup and teardown.  They can be both `callables` or `a\r\nlist of callables`.  This is specially useful when you wanna organize\r\nyour `Actions` into separated setup functions, then you only include\r\nthe ones you want in each scenario.\r\n\r\nIt may sound complicated, but during the rollout below you're gonna\r\nsee it's easy peasy.\r\n\r\n#### !!! IMPORTANT NOTE ON SETUP/TEARDOWN !!!\r\n\r\nNever, ever name your setup and teardown functions as just `setup` and\r\n`teardown` respectivelly.  \"Sure\" has its own mechanism for calling\r\nthem with a context variable, but if you name the callbacks as `setup`\r\nand/or `teardown`, then\r\n[nose will call them manually](http://readthedocs.org/docs/nose/en/latest/writing_tests.html#fixtures),\r\nbut not only that: you will get a very bad error since the appropriate\r\n`context` variable will not be passed as first argument.\r\n\r\n\r\n## Examples\r\n\r\nLet's go from a simple example and then we evolve into more features\r\n\r\n## The simplest case\r\n\r\n```python\r\nfrom sure import action_for, that, scenario\r\nfrom myapp import User\r\n\r\n@scenario\r\ndef users_should_introduce_themselves(context):\r\n    \"Users should eb able to introduce themselves\"\r\n\r\n    # aliasing the context for semantic usage below\r\n    Given = Then = context\r\n\r\n    # defining some actions\r\n    @action_for(context, provides=['user'])\r\n    def there_is_a_user_called(name):\r\n        context.user = User(first_name=name)\r\n\r\n    @action_for(context, depends_on=['user'])\r\n    def he_introduces_himself_with(a_greeting):\r\n        assert that(context.user.say_hello()).looks_like(a_greeting)\r\n\r\n    # calling the actions\r\n\r\n    Given.there_is_a_user_called('Fabio')\r\n    Then.he_introduces_himself_with('Hello, my name if Fabio. Nice meeting you')\r\n```\r\n\r\n\r\n## A slightly more elaborated example: browsing with django test client + lxml\r\n\r\n```python\r\nfrom django.test.client import Client\r\nfrom lxml import html as lhtml\r\nfrom sure import action_for, that, scenario\r\n\r\ndef prepare_browser(context):\r\n    @action_in(context, provides=['browser', 'response', 'dom'])\r\n    def I_navigate_to(path):\r\n       # preparing the browser\r\n       context.browser = Client()\r\n\r\n       # saving the response\r\n       context.response = context.browser.get(path)\r\n\r\n       # also saving a DOM object for future traversing\r\n       context.dom = lhtml.fromstring(context.response.content)\r\n\r\n    @action_in(context, depends_on=['browser'], provides=['title'])\r\n    def I_see_the_header_has_the_title(the_expected_title):\r\n        # just saving the title for future use\r\n        titles_found = context.dom.cssselect('header .title')\r\n\r\n        assert that(titles_found).len_is(1)\r\n        (context.title, ) = titles_found\r\n\r\n        assert that(context.title.text).looks_like(the_expected_title)\r\n\r\n    @action_in(context, depends_on=['title'])\r\n    def the_title_also_has_the_classes(expected_classes):\r\n        existing_classes = context.title.attrib.get('class', '')\r\n        for expected_class in expected_classes:\r\n            assert that(existing_classes).looks_like(expected_class)\r\n\r\n\r\n@scenario([prepare_browser])\r\ndef navigate_to_index_page(context):\r\n    \"Navigate to the index page and check some HTML markup\"\r\n    Given = Then = context\r\n\r\n    Given.I_navigate_to(\"/index\")\r\n    When.I_see_the_header_has_the_title(\"Welcome to our nifty website\")\r\n    Then.the_title_also_has_the_classes([\"alert\", \"alert-info\", \"fade-in\"])\r\n```\r\n\r\n# acknowledgements\r\n\r\nThanks to the folks of [Travis CI](http://travis-ci.org), thanks to it\r\nsure's builds are running agains python 2.5, 2.6 and 2.7 so I can\r\ngarantee it works for all those python versions.\r\n\r\nI love you guys\r\n\r\n# license\r\n\r\nsure is under MIT license, so that it can be embedded into your\r\nproject, and ran within your sandbox.\r\n\r\n    Copyright (C) <2010>  Gabriel Falcão <gabriel@nacaolivre.org>\r\n\r\n    Permission is hereby granted, free of charge, to any person\r\n    obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without\r\n    restriction, including without limitation the rights to use,\r\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the\r\n    Software is furnished to do so, subject to the following\r\n    conditions:\r\n\r\n    The above copyright notice and this permission notice shall be\r\n    included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n    OTHER DEALINGS IN THE SOFTWARE.\r\n"}